    
[FrameInfo(frame=<frame at 0x7f7b59bfcac0, file '/local_disk0/.ephemeral_nfs/envs/pythonEnv-103ad24a-4d0a-4b3f-a476-78548992a2a9/lib/python3.8/site-packages/sds_data_model/logger.py', line 64, code _format_parameter_and_argument>, filename='/local_disk0/.ephemeral_nfs/envs/pythonEnv-103ad24a-4d0a-4b3f-a476-78548992a2a9/lib/python3.8/site-packages/sds_data_model/logger.py', lineno=64, function='_format_parameter_and_argument', code_context=['stream_handler = StreamHandler()\n', 'stream_handler.setLevel(INFO)\n', '\n', '# create formatter\n', 'formatter = Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")\n', '\n', '# add formatter to stream handler\n', 'stream_handler.setFormatter(formatter)\n', '\n', '# add stream handler to logger\n', 'logger.addHandler(stream_handler)\n', '\n', '\n', 'def _get_anonymous_function_string(\n', '    func_name: str,\n', '    frame: types.FrameType,\n', ') -> str:\n', '    """Get the input code arguments to a function as a string."""\n', '    code_input = getouterframes(frame, 100)\n', '    code_context_string = "".join(code_input[4].code_context)\n', '    function_call_string_matches = search(\n', '        rf"\\.{func_name}\\(\\s*([\\w|\\W]+?\\))\\s*\\)", code_context_string\n', '    )\n', '    if not function_call_string_matches:\n', '        print(code_input)\n', '    else:\n', '        function_call_strings = function_call_string_matches.group(1)\n', '        return function_call_strings\n', '\n', '\n', 'def _get_parameter_and_argument_tuples(\n', '    func: Callable,\n', '    *args,\n', '    **kwargs,\n', ') -> Tuple[Tuple[str, Any], ...]:\n', '    func_signature = signature(func)\n', '    bound_arguments = func_signature.bind_partial(*args, **kwargs)\n', '    bound_arguments.apply_defaults()\n', '    return tuple(\n', '        (parameter, argument)\n', '        for parameter, argument in bound_arguments.arguments.items()\n', '    )\n', '\n', '\n', 'def _format_parameter_and_argument(\n', '    parameter: str,\n', '    argument: Any,\n', '    func: Callable,\n', ') -> str:\n', '    if isinstance(argument, FunctionType):\n', '        return f"{parameter}={_get_anonymous_function_string(func.__name__, currentframe())}"\n', '    elif parameter in ("self", "cls"):\n', '        return f"{parameter}"\n', '    else:\n', '        return f"{parameter}={argument}"\n', '\n', '\n', 'def _format_parameter_and_argument_tuples(\n', '    parameter_and_argument_tuples: Tuple[Tuple[str, Any], ...],\n', '    func: Callable,\n', ') -> str:\n', '    return ",\\n\\t".join(\n', '        _format_parameter_and_argument(parameter, argument, func)\n', '        for parameter, argument in parameter_and_argument_tuples\n', '    )\n', '\n', '\n', 'def _format_function_string(func_name: str, parameter_and_argument_string: str) -> str:\n', '    return f"""\n', '    {func_name}(\n', '        {parameter_and_argument_string}\n', '    )\n', '    """\n', '\n', '\n', 'def stringify_callable(func: Callable, *args, **kwargs) -> str:\n', '    parameter_and_argument_tuples = _get_parameter_and_argument_tuples(\n', '        func, *args, **kwargs\n', '    )\n', '    parameter_and_argument_string = _format_parameter_and_argument_tuples(\n', '        parameter_and_argument_tuples=parameter_and_argument_tuples,\n', '        func=func,\n', '    )\n', '    return _format_function_string(\n', '        func_name=func.__qualname__,\n', '        parameter_and_argument_string=parameter_and_argument_string,\n', '    )\n', '\n', '\n', 'def log(func):\n', '    @wraps(func)\n', '    def wrapper(*args, **kwargs):\n', '        try:\n', '            result = func(*args, **kwargs)\n', '            callable_string = stringify_callable(func, *args, **kwargs)\n', '            logger.info(f"{callable_string}")\n', '            return result\n', '        except Exception as e:\n', '            callable_string = stringify_callable(func, *args, **kwargs)\n', '            logger.exception(f"{callable_string} raised exception: {str(e)}")\n'], index=50), FrameInfo(frame=<frame at 0x7f7b598f4950, file '/local_disk0/.ephemeral_nfs/envs/pythonEnv-103ad24a-4d0a-4b3f-a476-78548992a2a9/lib/python3.8/site-packages/sds_data_model/logger.py', line 76, code <genexpr>>, filename='/local_disk0/.ephemeral_nfs/envs/pythonEnv-103ad24a-4d0a-4b3f-a476-78548992a2a9/lib/python3.8/site-packages/sds_data_model/logger.py', lineno=76, function='<genexpr>', code_context=['# create formatter\n', 'formatter = Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")\n', '\n', '# add formatter to stream handler\n', 'stream_handler.setFormatter(formatter)\n', '\n', '# add stream handler to logger\n', 'logger.addHandler(stream_handler)\n', '\n', '\n', 'def _get_anonymous_function_string(\n', '    func_name: str,\n', '    frame: types.FrameType,\n', ') -> str:\n', '    """Get the input code arguments to a function as a string."""\n', '    code_input = getouterframes(frame, 100)\n', '    code_context_string = "".join(code_input[4].code_context)\n', '    function_call_string_matches = search(\n', '        rf"\\.{func_name}\\(\\s*([\\w|\\W]+?\\))\\s*\\)", code_context_string\n', '    )\n', '    if not function_call_string_matches:\n', '        print(code_input)\n', '    else:\n', '        function_call_strings = function_call_string_matches.group(1)\n', '        return function_call_strings\n', '\n', '\n', 'def _get_parameter_and_argument_tuples(\n', '    func: Callable,\n', '    *args,\n', '    **kwargs,\n', ') -> Tuple[Tuple[str, Any], ...]:\n', '    func_signature = signature(func)\n', '    bound_arguments = func_signature.bind_partial(*args, **kwargs)\n', '    bound_arguments.apply_defaults()\n', '    return tuple(\n', '        (parameter, argument)\n', '        for parameter, argument in bound_arguments.arguments.items()\n', '    )\n', '\n', '\n', 'def _format_parameter_and_argument(\n', '    parameter: str,\n', '    argument: Any,\n', '    func: Callable,\n', ') -> str:\n', '    if isinstance(argument, FunctionType):\n', '        return f"{parameter}={_get_anonymous_function_string(func.__name__, currentframe())}"\n', '    elif parameter in ("self", "cls"):\n', '        return f"{parameter}"\n', '    else:\n', '        return f"{parameter}={argument}"\n', '\n', '\n', 'def _format_parameter_and_argument_tuples(\n', '    parameter_and_argument_tuples: Tuple[Tuple[str, Any], ...],\n', '    func: Callable,\n', ') -> str:\n', '    return ",\\n\\t".join(\n', '        _format_parameter_and_argument(parameter, argument, func)\n', '        for parameter, argument in parameter_and_argument_tuples\n', '    )\n', '\n', '\n', 'def _format_function_string(func_name: str, parameter_and_argument_string: str) -> str:\n', '    return f"""\n', '    {func_name}(\n', '        {parameter_and_argument_string}\n', '    )\n', '    """\n', '\n', '\n', 'def stringify_callable(func: Callable, *args, **kwargs) -> str:\n', '    parameter_and_argument_tuples = _get_parameter_and_argument_tuples(\n', '        func, *args, **kwargs\n', '    )\n', '    parameter_and_argument_string = _format_parameter_and_argument_tuples(\n', '        parameter_and_argument_tuples=parameter_and_argument_tuples,\n', '        func=func,\n', '    )\n', '    return _format_function_string(\n', '        func_name=func.__qualname__,\n', '        parameter_and_argument_string=parameter_and_argument_string,\n', '    )\n', '\n', '\n', 'def log(func):\n', '    @wraps(func)\n', '    def wrapper(*args, **kwargs):\n', '        try:\n', '            result = func(*args, **kwargs)\n', '            callable_string = stringify_callable(func, *args, **kwargs)\n', '            logger.info(f"{callable_string}")\n', '            return result\n', '        except Exception as e:\n', '            callable_string = stringify_callable(func, *args, **kwargs)\n', '            logger.exception(f"{callable_string} raised exception: {str(e)}")\n', '            raise e\n', '\n', '    return wrapper\n'], index=59), FrameInfo(frame=<frame at 0x7f7b59bfc900, file '/local_disk0/.ephemeral_nfs/envs/pythonEnv-103ad24a-4d0a-4b3f-a476-78548992a2a9/lib/python3.8/site-packages/sds_data_model/logger.py', line 75, code _format_parameter_and_argument_tuples>, filename='/local_disk0/.ephemeral_nfs/envs/pythonEnv-103ad24a-4d0a-4b3f-a476-78548992a2a9/lib/python3.8/site-packages/sds_data_model/logger.py', lineno=75, function='_format_parameter_and_argument_tuples', code_context=['# create formatter\n', 'formatter = Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")\n', '\n', '# add formatter to stream handler\n', 'stream_handler.setFormatter(formatter)\n', '\n', '# add stream handler to logger\n', 'logger.addHandler(stream_handler)\n', '\n', '\n', 'def _get_anonymous_function_string(\n', '    func_name: str,\n', '    frame: types.FrameType,\n', ') -> str:\n', '    """Get the input code arguments to a function as a string."""\n', '    code_input = getouterframes(frame, 100)\n', '    code_context_string = "".join(code_input[4].code_context)\n', '    function_call_string_matches = search(\n', '        rf"\\.{func_name}\\(\\s*([\\w|\\W]+?\\))\\s*\\)", code_context_string\n', '    )\n', '    if not function_call_string_matches:\n', '        print(code_input)\n', '    else:\n', '        function_call_strings = function_call_string_matches.group(1)\n', '        return function_call_strings\n', '\n', '\n', 'def _get_parameter_and_argument_tuples(\n', '    func: Callable,\n', '    *args,\n', '    **kwargs,\n', ') -> Tuple[Tuple[str, Any], ...]:\n', '    func_signature = signature(func)\n', '    bound_arguments = func_signature.bind_partial(*args, **kwargs)\n', '    bound_arguments.apply_defaults()\n', '    return tuple(\n', '        (parameter, argument)\n', '        for parameter, argument in bound_arguments.arguments.items()\n', '    )\n', '\n', '\n', 'def _format_parameter_and_argument(\n', '    parameter: str,\n', '    argument: Any,\n', '    func: Callable,\n', ') -> str:\n', '    if isinstance(argument, FunctionType):\n', '        return f"{parameter}={_get_anonymous_function_string(func.__name__, currentframe())}"\n', '    elif parameter in ("self", "cls"):\n', '        return f"{parameter}"\n', '    else:\n', '        return f"{parameter}={argument}"\n', '\n', '\n', 'def _format_parameter_and_argument_tuples(\n', '    parameter_and_argument_tuples: Tuple[Tuple[str, Any], ...],\n', '    func: Callable,\n', ') -> str:\n', '    return ",\\n\\t".join(\n', '        _format_parameter_and_argument(parameter, argument, func)\n', '        for parameter, argument in parameter_and_argument_tuples\n', '    )\n', '\n', '\n', 'def _format_function_string(func_name: str, parameter_and_argument_string: str) -> str:\n', '    return f"""\n', '    {func_name}(\n', '        {parameter_and_argument_string}\n', '    )\n', '    """\n', '\n', '\n', 'def stringify_callable(func: Callable, *args, **kwargs) -> str:\n', '    parameter_and_argument_tuples = _get_parameter_and_argument_tuples(\n', '        func, *args, **kwargs\n', '    )\n', '    parameter_and_argument_string = _format_parameter_and_argument_tuples(\n', '        parameter_and_argument_tuples=parameter_and_argument_tuples,\n', '        func=func,\n', '    )\n', '    return _format_function_string(\n', '        func_name=func.__qualname__,\n', '        parameter_and_argument_string=parameter_and_argument_string,\n', '    )\n', '\n', '\n', 'def log(func):\n', '    @wraps(func)\n', '    def wrapper(*args, **kwargs):\n', '        try:\n', '            result = func(*args, **kwargs)\n', '            callable_string = stringify_callable(func, *args, **kwargs)\n', '            logger.info(f"{callable_string}")\n', '            return result\n', '        except Exception as e:\n', '            callable_string = stringify_callable(func, *args, **kwargs)\n', '            logger.exception(f"{callable_string} raised exception: {str(e)}")\n', '            raise e\n', '\n', '    return wrapper\n'], index=58), FrameInfo(frame=<frame at 0x7f7b63d70420, file '/local_disk0/.ephemeral_nfs/envs/pythonEnv-103ad24a-4d0a-4b3f-a476-78548992a2a9/lib/python3.8/site-packages/sds_data_model/logger.py', line 93, code stringify_callable>, filename='/local_disk0/.ephemeral_nfs/envs/pythonEnv-103ad24a-4d0a-4b3f-a476-78548992a2a9/lib/python3.8/site-packages/sds_data_model/logger.py', lineno=93, function='stringify_callable', code_context=['# create formatter\n', 'formatter = Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")\n', '\n', '# add formatter to stream handler\n', 'stream_handler.setFormatter(formatter)\n', '\n', '# add stream handler to logger\n', 'logger.addHandler(stream_handler)\n', '\n', '\n', 'def _get_anonymous_function_string(\n', '    func_name: str,\n', '    frame: types.FrameType,\n', ') -> str:\n', '    """Get the input code arguments to a function as a string."""\n', '    code_input = getouterframes(frame, 100)\n', '    code_context_string = "".join(code_input[4].code_context)\n', '    function_call_string_matches = search(\n', '        rf"\\.{func_name}\\(\\s*([\\w|\\W]+?\\))\\s*\\)", code_context_string\n', '    )\n', '    if not function_call_string_matches:\n', '        print(code_input)\n', '    else:\n', '        function_call_strings = function_call_string_matches.group(1)\n', '        return function_call_strings\n', '\n', '\n', 'def _get_parameter_and_argument_tuples(\n', '    func: Callable,\n', '    *args,\n', '    **kwargs,\n', ') -> Tuple[Tuple[str, Any], ...]:\n', '    func_signature = signature(func)\n', '    bound_arguments = func_signature.bind_partial(*args, **kwargs)\n', '    bound_arguments.apply_defaults()\n', '    return tuple(\n', '        (parameter, argument)\n', '        for parameter, argument in bound_arguments.arguments.items()\n', '    )\n', '\n', '\n', 'def _format_parameter_and_argument(\n', '    parameter: str,\n', '    argument: Any,\n', '    func: Callable,\n', ') -> str:\n', '    if isinstance(argument, FunctionType):\n', '        return f"{parameter}={_get_anonymous_function_string(func.__name__, currentframe())}"\n', '    elif parameter in ("self", "cls"):\n', '        return f"{parameter}"\n', '    else:\n', '        return f"{parameter}={argument}"\n', '\n', '\n', 'def _format_parameter_and_argument_tuples(\n', '    parameter_and_argument_tuples: Tuple[Tuple[str, Any], ...],\n', '    func: Callable,\n', ') -> str:\n', '    return ",\\n\\t".join(\n', '        _format_parameter_and_argument(parameter, argument, func)\n', '        for parameter, argument in parameter_and_argument_tuples\n', '    )\n', '\n', '\n', 'def _format_function_string(func_name: str, parameter_and_argument_string: str) -> str:\n', '    return f"""\n', '    {func_name}(\n', '        {parameter_and_argument_string}\n', '    )\n', '    """\n', '\n', '\n', 'def stringify_callable(func: Callable, *args, **kwargs) -> str:\n', '    parameter_and_argument_tuples = _get_parameter_and_argument_tuples(\n', '        func, *args, **kwargs\n', '    )\n', '    parameter_and_argument_string = _format_parameter_and_argument_tuples(\n', '        parameter_and_argument_tuples=parameter_and_argument_tuples,\n', '        func=func,\n', '    )\n', '    return _format_function_string(\n', '        func_name=func.__qualname__,\n', '        parameter_and_argument_string=parameter_and_argument_string,\n', '    )\n', '\n', '\n', 'def log(func):\n', '    @wraps(func)\n', '    def wrapper(*args, **kwargs):\n', '        try:\n', '            result = func(*args, **kwargs)\n', '            callable_string = stringify_callable(func, *args, **kwargs)\n', '            logger.info(f"{callable_string}")\n', '            return result\n', '        except Exception as e:\n', '            callable_string = stringify_callable(func, *args, **kwargs)\n', '            logger.exception(f"{callable_string} raised exception: {str(e)}")\n', '            raise e\n', '\n', '    return wrapper\n'], index=76), FrameInfo(frame=<frame at 0x7f7b59516240, file '/local_disk0/.ephemeral_nfs/envs/pythonEnv-103ad24a-4d0a-4b3f-a476-78548992a2a9/lib/python3.8/site-packages/sds_data_model/logger.py', line 112, code wrapper>, filename='/local_disk0/.ephemeral_nfs/envs/pythonEnv-103ad24a-4d0a-4b3f-a476-78548992a2a9/lib/python3.8/site-packages/sds_data_model/logger.py', lineno=112, function='wrapper', code_context=['# create formatter\n', 'formatter = Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")\n', '\n', '# add formatter to stream handler\n', 'stream_handler.setFormatter(formatter)\n', '\n', '# add stream handler to logger\n', 'logger.addHandler(stream_handler)\n', '\n', '\n', 'def _get_anonymous_function_string(\n', '    func_name: str,\n', '    frame: types.FrameType,\n', ') -> str:\n', '    """Get the input code arguments to a function as a string."""\n', '    code_input = getouterframes(frame, 100)\n', '    code_context_string = "".join(code_input[4].code_context)\n', '    function_call_string_matches = search(\n', '        rf"\\.{func_name}\\(\\s*([\\w|\\W]+?\\))\\s*\\)", code_context_string\n', '    )\n', '    if not function_call_string_matches:\n', '        print(code_input)\n', '    else:\n', '        function_call_strings = function_call_string_matches.group(1)\n', '        return function_call_strings\n', '\n', '\n', 'def _get_parameter_and_argument_tuples(\n', '    func: Callable,\n', '    *args,\n', '    **kwargs,\n', ') -> Tuple[Tuple[str, Any], ...]:\n', '    func_signature = signature(func)\n', '    bound_arguments = func_signature.bind_partial(*args, **kwargs)\n', '    bound_arguments.apply_defaults()\n', '    return tuple(\n', '        (parameter, argument)\n', '        for parameter, argument in bound_arguments.arguments.items()\n', '    )\n', '\n', '\n', 'def _format_parameter_and_argument(\n', '    parameter: str,\n', '    argument: Any,\n', '    func: Callable,\n', ') -> str:\n', '    if isinstance(argument, FunctionType):\n', '        return f"{parameter}={_get_anonymous_function_string(func.__name__, currentframe())}"\n', '    elif parameter in ("self", "cls"):\n', '        return f"{parameter}"\n', '    else:\n', '        return f"{parameter}={argument}"\n', '\n', '\n', 'def _format_parameter_and_argument_tuples(\n', '    parameter_and_argument_tuples: Tuple[Tuple[str, Any], ...],\n', '    func: Callable,\n', ') -> str:\n', '    return ",\\n\\t".join(\n', '        _format_parameter_and_argument(parameter, argument, func)\n', '        for parameter, argument in parameter_and_argument_tuples\n', '    )\n', '\n', '\n', 'def _format_function_string(func_name: str, parameter_and_argument_string: str) -> str:\n', '    return f"""\n', '    {func_name}(\n', '        {parameter_and_argument_string}\n', '    )\n', '    """\n', '\n', '\n', 'def stringify_callable(func: Callable, *args, **kwargs) -> str:\n', '    parameter_and_argument_tuples = _get_parameter_and_argument_tuples(\n', '        func, *args, **kwargs\n', '    )\n', '    parameter_and_argument_string = _format_parameter_and_argument_tuples(\n', '        parameter_and_argument_tuples=parameter_and_argument_tuples,\n', '        func=func,\n', '    )\n', '    return _format_function_string(\n', '        func_name=func.__qualname__,\n', '        parameter_and_argument_string=parameter_and_argument_string,\n', '    )\n', '\n', '\n', 'def log(func):\n', '    @wraps(func)\n', '    def wrapper(*args, **kwargs):\n', '        try:\n', '            result = func(*args, **kwargs)\n', '            callable_string = stringify_callable(func, *args, **kwargs)\n', '            logger.info(f"{callable_string}")\n', '            return result\n', '        except Exception as e:\n', '            callable_string = stringify_callable(func, *args, **kwargs)\n', '            logger.exception(f"{callable_string} raised exception: {str(e)}")\n', '            raise e\n', '\n', '    return wrapper\n'], index=95), FrameInfo(frame=<frame at 0x7f7ad002d5e0, file '<command-1327030895035115>', line 6, code <module>>, filename='<command-1327030895035115>', lineno=6, function='<module>', code_context=['from sds_data_model.vector import VectorLayer\n', 'from dask.diagnostics import ProgressBar\n', '\n', 'pipeline = (\n', '#     VectorLayer(gpdf = str(sub_in_data), name = data_name, schema = schema)\n', '    VectorLayer.from_files(data_path = str(in_data_path), name = data_name)\n', '    .to_tiles()\n', '    .where(lambda df: df["status"] == "Candidate")\n', '    .to_data_array_as_mask()\n', '    .to_dataset()\n', '    .to_zarr(\n', '        store = out_data_path,\n', '        mode = "w",\n', '        compute = False\n', '    )\n', ')\n', 'with ProgressBar():\n', '    pipeline.compute()\n'], index=5), FrameInfo(frame=<frame at 0x3214ff0, file '/databricks/python/lib/python3.8/site-packages/IPython/core/interactiveshell.py', line 3437, code run_code>, filename='/databricks/python/lib/python3.8/site-packages/IPython/core/interactiveshell.py', lineno=3437, function='run_code', code_context=['        Returns coroutine object, which can be executed via async loop runner\n', '\n', '        WARNING: The semantics of `async_exec` are quite different from `exec`,\n', '        in particular you can only pass a single namespace. It also return a\n', '        handle to the value of the last things returned by code_object.\n', '        """\n', '\n', '        return eval(code_obj, user_ns)\n', '\n', '    async def run_code(self, code_obj, result=None, *, async_=False):\n', '        """Execute a code object.\n', '\n', '        When an exception occurs, self.showtraceback() is called to display a\n', '        traceback.\n', '\n', '        Parameters\n', '        ----------\n', '        code_obj : code object\n', '          A compiled code object, to be executed\n', '        result : ExecutionResult, optional\n', '          An object to store exceptions that occur during execution.\n', '        async_ :  Bool (Experimental)\n', '          Attempt to run top-level asynchronous code in a default loop.\n', '\n', '        Returns\n', '        -------\n', '        False : successful execution.\n', '        True : an error occurred.\n', '        """\n', '        # special value to say that anything above is IPython and should be\n', '        # hidden.\n', '        __tracebackhide__ = "__ipython_bottom__"\n', '        # Set our own excepthook in case the user code tries to call it\n', "        # directly, so that the IPython crash handler doesn't get triggered\n", '        old_excepthook, sys.excepthook = sys.excepthook, self.excepthook\n', '\n', '        # we save the original sys.excepthook in the instance, in case config\n', '        # code (such as magics) needs access to it.\n', '        self.sys_excepthook = old_excepthook\n', "        outflag = True  # happens in more places, so it's easier as default\n", '        try:\n', '            try:\n', '                self.hooks.pre_run_code_hook()\n', '                if async_ and sys.version_info < (3,8):\n', '                    last_expr = (await self._async_exec(code_obj, self.user_ns))\n', '                    code = compile(\'last_expr\', \'fake\', "single")\n', "                    exec(code, {'last_expr': last_expr})\n", '                elif async_ :\n', '                    await eval(code_obj, self.user_global_ns, self.user_ns)\n', '                else:\n', '                    exec(code_obj, self.user_global_ns, self.user_ns)\n', '            finally:\n', '                # Reset our crash handler in place\n', '                sys.excepthook = old_excepthook\n', '        except SystemExit as e:\n', '            if result is not None:\n', '                result.error_in_exec = e\n', '            self.showtraceback(exception_only=True)\n', '            warn("To exit: use \'exit\', \'quit\', or Ctrl-D.", stacklevel=1)\n', '        except self.custom_exceptions:\n', '            etype, value, tb = sys.exc_info()\n', '            if result is not None:\n', '                result.error_in_exec = value\n', '            self.CustomTB(etype, value, tb)\n', '        except:\n', '            if result is not None:\n', '                result.error_in_exec = sys.exc_info()[1]\n', '            self.showtraceback(running_compiled_code=True)\n', '        else:\n', '            outflag = False\n', '        return outflag\n', '\n', '    # For backwards compatibility\n', '    runcode = run_code\n', '\n', '    def check_complete(self, code: str) -> Tuple[str, str]:\n', '        """Return whether a block of code is ready to execute, or should be continued\n', '\n', '        Parameters\n', '        ----------\n', '        source : string\n', '          Python input code, which can be multiline.\n', '\n', '        Returns\n', '        -------\n', '        status : str\n', "          One of 'complete', 'incomplete', or 'invalid' if source is not a\n", '          prefix of valid code.\n', '        indent : str\n', "          When status is 'incomplete', this is some whitespace to insert on\n", '          the next line of the prompt.\n', '        """\n', '        status, nspaces = self.input_transformer_manager.check_complete(code)\n', "        return status, ' ' * (nspaces or 0)\n", '\n', '    #-------------------------------------------------------------------------\n', '    # Things related to GUI support and pylab\n', '    #-------------------------------------------------------------------------\n', '\n', '    active_eventloop = None\n'], index=50), FrameInfo(frame=<frame at 0x320c160, file '/databricks/python/lib/python3.8/site-packages/IPython/core/interactiveshell.py', line 3357, code run_ast_nodes>, filename='/databricks/python/lib/python3.8/site-packages/IPython/core/interactiveshell.py', lineno=3357, function='run_ast_nodes', code_context=["        if interactivity == 'none':\n", '            to_run_exec, to_run_interactive = nodelist, []\n', "        elif interactivity == 'last':\n", '            to_run_exec, to_run_interactive = nodelist[:-1], nodelist[-1:]\n', "        elif interactivity == 'all':\n", '            to_run_exec, to_run_interactive = [], nodelist\n', "        elif interactivity == 'async':\n", '            to_run_exec, to_run_interactive = [], nodelist\n', '            _async = True\n', '        else:\n', '            raise ValueError("Interactivity was %r" % interactivity)\n', '\n', '        try:\n', '            if _async and sys.version_info > (3,8):\n', '                raise ValueError("This branch should never happen on Python 3.8 and above, "\n', '                                 "please try to upgrade IPython and open a bug report with your case.")\n', '            if _async:\n', '                # If interactivity is async the semantics of run_code are\n', '                # completely different Skip usual machinery.\n', '                mod = Module(nodelist, [])\n', "                async_wrapper_code = compiler(mod, cell_name, 'exec')\n", '                exec(async_wrapper_code, self.user_global_ns, self.user_ns)\n', "                async_code = removed_co_newlocals(self.user_ns.pop('async-def-wrapper')).__code__\n", '                if (await self.run_code(async_code, result, async_=True)):\n', '                    return True\n', '            else:\n', '                if sys.version_info > (3, 8):\n', '                    def compare(code):\n', '                        is_async = (inspect.CO_COROUTINE & code.co_flags == inspect.CO_COROUTINE)\n', '                        return is_async\n', '                else:\n', '                    def compare(code):\n', '                        return _async\n', '\n', '                # refactor that to just change the mod constructor.\n', '                to_run = []\n', '                for node in to_run_exec:\n', "                    to_run.append((node, 'exec'))\n", '\n', '                for node in to_run_interactive:\n', "                    to_run.append((node, 'single'))\n", '\n', '                for node,mode in to_run:\n', "                    if mode == 'exec':\n", '                        mod = Module([node], [])\n', "                    elif mode == 'single':\n", '                        mod = ast.Interactive([node])\n', "                    with compiler.extra_flags(getattr(ast, 'PyCF_ALLOW_TOP_LEVEL_AWAIT', 0x0) if self.autoawait else 0x0):\n", '                        code = compiler(mod, cell_name, mode)\n', '                        asy = compare(code)\n', '                    if (await self.run_code(code, result,  async_=asy)):\n', '                        return True\n', '\n', '            # Flush softspace\n', '            if softspace(sys.stdout, 0):\n', '                print()\n', '\n', '        except:\n', "            # It's possible to have exceptions raised here, typically by\n", "            # compilation of odd code (such as a naked 'return' outside a\n", "            # function) that did parse but isn't valid. Typically the exception\n", "            # is a SyntaxError, but it's safest just to catch anything and show\n", '            # the user a traceback.\n', '\n', '            # We do only one try/except outside the loop to minimize the impact\n', '            # on runtime, and also because if any node in the node list is\n', '            # broken, we should stop execution completely.\n', '            if result:\n', '                result.error_before_exec = sys.exc_info()[1]\n', '            self.showtraceback()\n', '            return True\n', '\n', '        return False\n', '\n', '    def _async_exec(self, code_obj: types.CodeType, user_ns: dict):\n', '        """\n', '        Evaluate an asynchronous code object using a code runner\n', '\n', '        Fake asynchronous execution of code_object in a namespace via a proxy namespace.\n', '\n', '        Returns coroutine object, which can be executed via async loop runner\n', '\n', '        WARNING: The semantics of `async_exec` are quite different from `exec`,\n', '        in particular you can only pass a single namespace. It also return a\n', '        handle to the value of the last things returned by code_object.\n', '        """\n', '\n', '        return eval(code_obj, user_ns)\n', '\n', '    async def run_code(self, code_obj, result=None, *, async_=False):\n', '        """Execute a code object.\n', '\n', '        When an exception occurs, self.showtraceback() is called to display a\n', '        traceback.\n', '\n', '        Parameters\n', '        ----------\n', '        code_obj : code object\n', '          A compiled code object, to be executed\n', '        result : ExecutionResult, optional\n'], index=50), FrameInfo(frame=<frame at 0x2fefea0, file '/databricks/python/lib/python3.8/site-packages/IPython/core/interactiveshell.py', line 3165, code run_cell_async>, filename='/databricks/python/lib/python3.8/site-packages/IPython/core/interactiveshell.py', lineno=3165, function='run_cell_async', code_context=['                    if sys.version_info < (3,8) and self.autoawait:\n', '                        if _should_be_async(cell):\n', '                            # the code AST below will not be user code: we wrap it\n', '                            # in an `async def`. This will likely make some AST\n', '                            # transformer below miss some transform opportunity and\n', '                            # introduce a small coupling to run_code (in which we\n', '                            # bake some assumptions of what _ast_asyncify returns.\n', '                            # they are ways around (like grafting part of the ast\n', '                            # later:\n', '                            #    - Here, return code_ast.body[0].body[1:-1], as well\n', '                            #    as last expression in  return statement which is\n', '                            #    the user code part.\n', '                            #    - Let it go through the AST transformers, and graft\n', '                            #    - it back after the AST transform\n', '                            # But that seem unreasonable, at least while we\n', '                            # do not need it.\n', "                            code_ast = _ast_asyncify(cell, 'async-def-wrapper')\n", '                            _run_async = True\n', '                        else:\n', '                            code_ast = compiler.ast_parse(cell, filename=cell_name)\n', '                    else:\n', '                        code_ast = compiler.ast_parse(cell, filename=cell_name)\n', '                except self.custom_exceptions as e:\n', '                    etype, value, tb = sys.exc_info()\n', '                    self.CustomTB(etype, value, tb)\n', '                    return error_before_exec(e)\n', '                except IndentationError as e:\n', '                    self.showindentationerror()\n', '                    return error_before_exec(e)\n', '                except (OverflowError, SyntaxError, ValueError, TypeError,\n', '                        MemoryError) as e:\n', '                    self.showsyntaxerror()\n', '                    return error_before_exec(e)\n', '\n', '                # Apply AST transformations\n', '                try:\n', '                    code_ast = self.transform_ast(code_ast)\n', '                except InputRejected as e:\n', '                    self.showtraceback()\n', '                    return error_before_exec(e)\n', '\n', '                # Give the displayhook a reference to our ExecutionResult so it\n', '                # can fill in the output value.\n', '                self.displayhook.exec_result = result\n', '\n', '                # Execute the user code\n', '                interactivity = "none" if silent else self.ast_node_interactivity\n', '                if _run_async:\n', "                    interactivity = 'async'\n", '\n', '                has_raised = await self.run_ast_nodes(code_ast.body, cell_name,\n', '                       interactivity=interactivity, compiler=compiler, result=result)\n', '\n', '                self.last_execution_succeeded = not has_raised\n', '                self.last_execution_result = result\n', '\n', '                # Reset this so later displayed values do not modify the\n', '                # ExecutionResult\n', '                self.displayhook.exec_result = None\n', '\n', '        if store_history:\n', '            # Write output to the database. Does nothing unless\n', '            # history output logging is enabled.\n', '            self.history_manager.store_output(self.execution_count)\n', '            # Each cell is a *single* input, regardless of how many lines it has\n', '            self.execution_count += 1\n', '\n', '        return result\n', '\n', '    def transform_cell(self, raw_cell):\n', '        """Transform an input cell before parsing it.\n', '\n', '        Static transformations, implemented in IPython.core.inputtransformer2,\n', '        deal with things like ``%magic`` and ``!system`` commands.\n', '        These run on all input.\n', '        Dynamic transformations, for things like unescaped magics and the exit\n', '        autocall, depend on the state of the interpreter.\n', '        These only apply to single line inputs.\n', '\n', '        These string-based transformations are followed by AST transformations;\n', '        see :meth:`transform_ast`.\n', '        """\n', '        # Static input transformations\n', '        cell = self.input_transformer_manager.transform_cell(raw_cell)\n', '\n', '        if len(cell.splitlines()) == 1:\n', '            # Dynamic transformations - only applied for single line commands\n', '            with self.builtin_trap:\n', '                # use prefilter_lines to handle trailing newlines\n', '                # restore trailing newline for ast.parse\n', "                cell = self.prefilter_manager.prefilter_lines(cell) + '\\n'\n", '\n', '        lines = cell.splitlines(keepends=True)\n', '        for transform in self.input_transformers_post:\n', '            lines = transform(lines)\n', "        cell = ''.join(lines)\n", '\n', '        return cell\n', '\n', '    def transform_ast(self, node):\n'], index=50), FrameInfo(frame=<frame at 0x320fd30, file '/databricks/python/lib/python3.8/site-packages/IPython/core/async_helpers.py', line 68, code _pseudo_sync_runner>, filename='/databricks/python/lib/python3.8/site-packages/IPython/core/async_helpers.py', lineno=68, function='_pseudo_sync_runner', code_context=['\n', '\n', 'class _AsyncIORunner:\n', '\n', '    def __call__(self, coro):\n', '        """\n', '        Handler for asyncio autoawait\n', '        """\n', '        import asyncio\n', '\n', '        return asyncio.get_event_loop().run_until_complete(coro)\n', '\n', '    def __str__(self):\n', "        return 'asyncio'\n", '\n', '_asyncio_runner = _AsyncIORunner()\n', '\n', '\n', 'def _curio_runner(coroutine):\n', '    """\n', '    handler for curio autoawait\n', '    """\n', '    import curio\n', '\n', '    return curio.run(coroutine)\n', '\n', '\n', 'def _trio_runner(async_fn):\n', '    import trio\n', '\n', '    async def loc(coro):\n', '        """\n', '        We need the dummy no-op async def to protect from\n', "        trio's internal. See https://github.com/python-trio/trio/issues/89\n", '        """\n', '        return await coro\n', '\n', '    return trio.run(loc, async_fn)\n', '\n', '\n', 'def _pseudo_sync_runner(coro):\n', '    """\n', '    A runner that does not really allow async execution, and just advance the coroutine.\n', '\n', '    See discussion in https://github.com/python-trio/trio/issues/608,\n', '\n', '    Credit to Nathaniel Smith\n', '\n', '    """\n', '    try:\n', '        coro.send(None)\n', '    except StopIteration as exc:\n', '        return exc.value\n', '    else:\n', '        # TODO: do not raise but return an execution result with the right info.\n', '        raise RuntimeError(\n', '            "{coro_name!r} needs a real async loop".format(coro_name=coro.__name__)\n', '        )\n', '\n', '\n', 'def _asyncify(code: str) -> str:\n', '    """wrap code in async def definition.\n', '\n', '    And setup a bit of context to run it later.\n', '    """\n', '    res = dedent(\n', '        """\n', '    async def __wrapper__():\n', '        try:\n', '    {usercode}\n', '        finally:\n', '            locals()\n', '    """\n', '    ).format(usercode=indent(code, " " * 8))\n', '    return res\n', '\n', '\n', 'class _AsyncSyntaxErrorVisitor(ast.NodeVisitor):\n', '    """\n', '    Find syntax errors that would be an error in an async repl, but because\n', '    the implementation involves wrapping the repl in an async function, it\n', '    is erroneously allowed (e.g. yield or return at the top level)\n', '    """\n', '    def __init__(self):\n', '        if sys.version_info >= (3,8):\n', "            raise ValueError('DEPRECATED in Python 3.8+')\n", '        self.depth = 0\n', '        super().__init__()\n', '\n', '    def generic_visit(self, node):\n', '        func_types = (ast.FunctionDef, ast.AsyncFunctionDef)\n', '        invalid_types_by_depth = {\n', '            0: (ast.Return, ast.Yield, ast.YieldFrom),\n', '            1: (ast.Nonlocal,)\n', '        }\n', '\n', '        should_traverse = self.depth < max(invalid_types_by_depth.keys())\n', '        if isinstance(node, func_types) and should_traverse:\n', '            self.depth += 1\n', '            super().generic_visit(node)\n'], index=50), FrameInfo(frame=<frame at 0x31f6130, file '/databricks/python/lib/python3.8/site-packages/IPython/core/interactiveshell.py', line 2940, code _run_cell>, filename='/databricks/python/lib/python3.8/site-packages/IPython/core/interactiveshell.py', lineno=2940, function='_run_cell', code_context=['        result : :class:`ExecutionResult`\n', '        """\n', '        result = None\n', '        try:\n', '            result = self._run_cell(\n', '                raw_cell, store_history, silent, shell_futures)\n', '        finally:\n', "            self.events.trigger('post_execute')\n", '            if not silent:\n', "                self.events.trigger('post_run_cell', result)\n", '        return result\n', '\n', '    def _run_cell(self, raw_cell:str, store_history:bool, silent:bool, shell_futures:bool):\n', '        """Internal method to run a complete IPython cell."""\n', '\n', '        # we need to avoid calling self.transform_cell multiple time on the same thing\n', '        # so we need to store some results:\n', '        preprocessing_exc_tuple = None\n', '        try:\n', '            transformed_cell = self.transform_cell(raw_cell)\n', '        except Exception:\n', '            transformed_cell = raw_cell\n', '            preprocessing_exc_tuple = sys.exc_info()\n', '\n', '        assert transformed_cell is not None\n', '        coro = self.run_cell_async(\n', '            raw_cell,\n', '            store_history=store_history,\n', '            silent=silent,\n', '            shell_futures=shell_futures,\n', '            transformed_cell=transformed_cell,\n', '            preprocessing_exc_tuple=preprocessing_exc_tuple,\n', '        )\n', '\n', '        # run_cell_async is async, but may not actually need an eventloop.\n', '        # when this is the case, we want to run it using the pseudo_sync_runner\n', '        # so that code can invoke eventloops (for example via the %run , and\n', '        # `%paste` magic.\n', '        if self.trio_runner:\n', '            runner = self.trio_runner\n', '        elif self.should_run_async(\n', '            raw_cell,\n', '            transformed_cell=transformed_cell,\n', '            preprocessing_exc_tuple=preprocessing_exc_tuple,\n', '        ):\n', '            runner = self.loop_runner\n', '        else:\n', '            runner = _pseudo_sync_runner\n', '\n', '        try:\n', '            return runner(coro)\n', '        except BaseException as e:\n', '            info = ExecutionInfo(raw_cell, store_history, silent, shell_futures)\n', '            result = ExecutionResult(info)\n', '            result.error_in_exec = e\n', '            self.showtraceback(running_compiled_code=True)\n', '            return result\n', '        return\n', '\n', '    def should_run_async(\n', '        self, raw_cell: str, *, transformed_cell=None, preprocessing_exc_tuple=None\n', '    ) -> bool:\n', '        """Return whether a cell should be run asynchronously via a coroutine runner\n', '\n', '        Parameters\n', '        ----------\n', '        raw_cell: str\n', '            The code to be executed\n', '\n', '        Returns\n', '        -------\n', '        result: bool\n', '            Whether the code needs to be run with a coroutine runner or not\n', '\n', '        .. versionadded: 7.0\n', '        """\n', '        if not self.autoawait:\n', '            return False\n', '        if preprocessing_exc_tuple is not None:\n', '            return False\n', '        assert preprocessing_exc_tuple is None\n', '        if transformed_cell is None:\n', '            warnings.warn(\n', '                "`should_run_async` will not call `transform_cell`"\n', '                " automatically in the future. Please pass the result to"\n', '                " `transformed_cell` argument and any exception that happen"\n', '                " during the"\n', '                "transform in `preprocessing_exc_tuple` in"\n', '                " IPython 7.17 and above.",\n', '                DeprecationWarning,\n', '                stacklevel=2,\n', '            )\n', '            try:\n', '                cell = self.transform_cell(raw_cell)\n', '            except Exception:\n', '                # any exception during transform will be raised\n', '                # prior to execution\n', '                return False\n', '        else:\n', '            cell = transformed_cell\n'], index=50), FrameInfo(frame=<frame at 0x7f7b892a3a40, file '/databricks/python/lib/python3.8/site-packages/IPython/core/interactiveshell.py', line 2894, code run_cell>, filename='/databricks/python/lib/python3.8/site-packages/IPython/core/interactiveshell.py', lineno=2894, function='run_cell', code_context=['        helpful error messages to the screen.\n', '\n', '        `SystemExit` exceptions with status code 0 or None are ignored.\n', '\n', '        Parameters\n', '        ----------\n', '        mod_name : string\n', '            The name of the module to be executed.\n', '        where : dict\n', '            The globals namespace.\n', '        """\n', '        try:\n', '            try:\n', '                where.update(\n', '                    runpy.run_module(str(mod_name), run_name="__main__",\n', '                                     alter_sys=True)\n', '                            )\n', '            except SystemExit as status:\n', '                if status.code:\n', '                    raise\n', '        except:\n', '            self.showtraceback()\n', "            warn('Unknown failure executing module: <%s>' % mod_name)\n", '\n', '    def run_cell(self, raw_cell, store_history=False, silent=False, shell_futures=True):\n', '        """Run a complete IPython cell.\n', '\n', '        Parameters\n', '        ----------\n', '        raw_cell : str\n', '          The code (including IPython code such as %magic functions) to run.\n', '        store_history : bool\n', "          If True, the raw and translated cell will be stored in IPython's\n", "          history. For user code calling back into IPython's machinery, this\n", '          should be set to False.\n', '        silent : bool\n', '          If True, avoid side-effects, such as implicit displayhooks and\n', '          and logging.  silent=True forces store_history=False.\n', '        shell_futures : bool\n', '          If True, the code will share future statements with the interactive\n', '          shell. It will both be affected by previous __future__ imports, and\n', '          any __future__ imports in the code will affect the shell. If False,\n', '          __future__ imports are not shared in either direction.\n', '\n', '        Returns\n', '        -------\n', '        result : :class:`ExecutionResult`\n', '        """\n', '        result = None\n', '        try:\n', '            result = self._run_cell(\n', '                raw_cell, store_history, silent, shell_futures)\n', '        finally:\n', "            self.events.trigger('post_execute')\n", '            if not silent:\n', "                self.events.trigger('post_run_cell', result)\n", '        return r
*** WARNING: skipped 21154 bytes of output ***
